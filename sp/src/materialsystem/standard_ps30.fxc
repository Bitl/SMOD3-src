// Combos
// DYNAMIC: "NUM_LIGHTS"		"0..4"


#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
//#include "common_parallax.h"


sampler smBaseTex		: register( s0 ); //smBaseTex
sampler smNormalMap		: register( s1 ); //smNormalMap
sampler smGloss			: register( s2 ); //smGloss
sampler smRefl			: register( s3 ); //smRefl
sampler smCubemap		: register( s4 ); //smCubemap

//const float4 flColor	: register( c0 );


//const float2 g_cData_tiling		: register( c16 ); 		// Static
//const float3 g_cAmbientCube[6]		: register( c0 );
//PixelShaderLightInfo g_cLightInfo[3]		: register( c6 );



//sampler smAO		: register( s4 );

/*float Vis_SmithJointApprox( float Roughness, float NoV, float NoL )
{
	float a = Roughness * Roughness;
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * (1 / (Vis_SmithV + Vis_SmithL) );
}

const static float PI = 3.1415926535897932f;

float D_GGX( float Roughness, float NoH )
{
	float a = Roughness * Roughness;
	float a2 = a * a;
	float d = ( NoH * a2 - NoH ) * NoH + 1;	// 2 mad
	return a2 / ( PI*d*d );					// 4 mul, 1 rcp
}


void SpecularVisTerm( in float3 WPos, in float3 WNormal, in float3 EyeToWorld, in float Roughness, out float Vis )
{
	float3 ViewDir = EyeToWorld * -1; // Make it World->Eye

	Vis = 0;
	
	float3 LColor;
	float3 LDir;

	for (int i = 0; i < NUM_LIGHTS; i++)
	{
		GetLightData(g_cLightInfo, i, WPos, LColor, LDir);

		float NdotL = saturate(dot(WNormal, LDir * -1));
		float NdotV = saturate(abs( dot(WNormal, ViewDir) ) + 1e-5 );
		
		Vis = Vis_SmithJointApprox(Roughness, NdotV, NdotL);
	}
	
}


void DistTerm( in float3 WPos, in float3 WNormal, in float3 EyeToWorld, in float Roughness, out float D )
{
	float3 ViewDir = EyeToWorld * -1; // Make it World->Eye

	D = 0;
	
	float3 LColor;
	float3 LDir;

	for (int i = 0; i < NUM_LIGHTS; i++)
	{
		GetLightData(g_cLightInfo, i, WPos, LColor, LDir);

		//float3 H = normalize(ViewDir + LDir);
		float3 H = normalize(LDir);
		float NdotH = saturate(dot(WNormal, H));
		
		D = D_GGX(Roughness, NdotH);
	}
	
}


float4 GetPBR( in float2 UV, in float3 WNormal, in float3 WPos, in float4 VAttn, in float4 ProjPos, in float3 TanS, in float3 TanT, in float3 Eye2World, in float2 Tiling, in sampler smBaseTex, in sampler smNormalMap, in sampler smNormalMap, in sampler smRefl, in sampler smCubemap )
{
	
	float2 uvTiled = Tiling * UV;
	float3x3 tangentSpace = { TanS, TanT, WNormal };
	
	//float3 world2Eye = In.vEye2World * float( -1.000000 );
	float4 baseTex = tex2D( smBaseTex, uvTiled );
	
	float3 normal = normalize((tex2D( smNormalMap, uvTiled ).rgb * 2.0f) - 1.0f);
	normal = mul( normal, tangentSpace);
	normal = normalize( normal );
	
	float roughness = 1.0f - tex2D( smNormalMap, uvTiled ).r;
	float reflTex = tex2D( smRefl, uvTiled ).r;
	//float4 ao = tex2D( smAO, uvTiled ).rgba;
	
	
	float3 diffuse = PixelShaderDoLighting( WPos, normal, float3(0,0,0), false, true, VAttn, g_cAmbientCube, NUM_LIGHTS, g_cLightInfo, false, false, 1.0f );
			
	float visTerm = (float)0;
	SpecularVisTerm( WPos, normal, Eye2World, roughness, visTerm );
	
	float distTerm = (float)0;
	DistTerm( WPos, normal, Eye2World, roughness, distTerm );
	

	float specular = visTerm * distTerm;
	
	float3 reflections = texCUBE( smCubemap, reflect( Eye2World, normal ) ).rgb;
	reflections = reflections * ENV_MAP_SCALE;
	reflections = reflTex * reflections;

	float light = diffuse + (specular * reflections);
	return float4( baseTex.rgb * light, baseTex.a );
}*/


struct PS_INPUT
{
	float2 UV					:	TEXCOORD0;
	float3 WNormal				:	TEXCOORD1;
	float3 WPos					:	TEXCOORD2;
	
	// change to float3
	float4 VAttn				:	TEXCOORD3;

	float4 ProjPos				:	TEXCOORD4;

	float3 TanS					:	TEXCOORD5;
	float3 TanT					:	TEXCOORD6;

	float3 Eye2World			:	TEXCOORD7;
};
struct PS_OUTPUT
{
	float4 Color				:	COLOR0;
};


PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	/*Out.Color = GetPBR(
		In.UV, In.WNormal, In.WPos, In.VAttn, In. ProjPos, In.TanS, In.TanT, In.Eye2World,
		g_cData_tiling,
		smBaseTex,
		smNormalMap,
		smGloss,
		smRefl,
		smCubemap
	);*/
	float4 baseColor = float4(1, 1, 1, 1);
	baseColor = tex2D(smBaseTex, In.UV.xy);
	Out.Color = baseColor;
	return Out;
}